---
layout: default
title: Intro to Computer Science
nav_order: 1
has_children: true
---

# Intro to Computer Science

**Programming by Design: Computing, Representation, and Reasoning**

This full-year course uses computing as a lens for structure, systems, and reasoning. Students build fluency across languages and representationsâ€”starting from abstraction and design, and ending in networked systems and real-world investigation.

### Course Units

| Unit | Title | Description |
|------|-------|-------------|
| [Unit 0](/intro_cs/unit_0_story_of_data.md) | The Story of Data | Systems, norms, history of computing |
| [Unit 1](/intro_cs/unit_1_design_racket.md) | Programming by Design (Racket) | Pure functions, recursion, testing |
| [Unit 2](/intro_cs/unit_2_data_science_pyret.md) | Data Science and Representation | Transformations, visualizations, Pyret |
| [Unit 3](/intro_cs/unit_3_systems_python.md) | Systems and Control | Loops, state, Python + EarSketch |
| [Unit 4](/intro_cs/unit_4_interface_html_css.md) | Interface and Communication | HTML/CSS, argument through design |
| [Unit 5](/intro_cs/unit_5_code_in_the_wild.md) | Code in the Wild | Jupyter, APIs, reproducibility |
| [Unit 6](/intro_cs/unit_6_networks_protocols.md) | Networks and Power | IP, HTTP, infrastructure reflection |
| [Unit 7](/intro_cs/unit_7_capstone.md) | Capstone Projects | Independent project, documentation, defense |

### Planning and Support

- [Routines and Threaded Practices](/intro_cs/intro_cs_routines_and_threads.md)
- [Assessment Overview](/intro_cs/intro_cs_assessment_map.md)
- [Instructor Guide](/intro_cs/intro_cs_intructor_implementation_guide.md)
- [Student Glossary](/intro_cs/intro_cs_student_glossary.md)
- [Course and Pathways Overview](/intro_cs/intro_cs_course_overview_pathways.md)
- [Affective Learning Appendix](/intro_cs/planning_docs/affective_learning.md)
